{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Portf\u00f3lio 4 - Intelig\u00eancia Artificial","text":""},{"location":"#agente-baseado-em-conhecimento","title":"Agente Baseado em Conhecimento","text":"<p>Os agentes baseados em conhecimento desempenham um papel central na intelig\u00eancia artificial (IA), pois empregam racioc\u00ednio l\u00f3gico sobre um conjunto estruturado de informa\u00e7\u00f5es para tomar decis\u00f5es e agir em um ambiente. Esses agentes se destacam por sua capacidade de integrar informa\u00e7\u00f5es novas e realizar infer\u00eancias, o que os torna particularmente adequados para ambientes complexos e parcialmente observ\u00e1veis.</p>"},{"location":"#o-que-e-um-agente-baseado-em-conhecimento","title":"O que \u00e9 um Agente Baseado em Conhecimento?","text":"<p>Um agente baseado em conhecimento \u00e9 um sistema capaz de realizar a\u00e7\u00f5es inteligentes utilizando uma base de conhecimento (Knowledge Base, KB). A base de conhecimento \u00e9 composta por um conjunto de senten\u00e7as que representam informa\u00e7\u00f5es sobre o mundo, expressas em uma linguagem de representa\u00e7\u00e3o de conhecimento, como l\u00f3gica proposicional ou l\u00f3gica de predicados.</p> <p>Esses agentes operam por meio de dois componentes principais:</p> <ol> <li>TELL: A opera\u00e7\u00e3o que adiciona novas informa\u00e7\u00f5es \u00e0 base de conhecimento.</li> <li>ASK: A opera\u00e7\u00e3o que consulta a base de conhecimento para recuperar ou inferir informa\u00e7\u00f5es relevantes.</li> </ol> <p>Essas opera\u00e7\u00f5es s\u00e3o frequentemente auxiliadas por processos de infer\u00eancia, permitindo ao agente derivar novas senten\u00e7as com base nas que j\u00e1 existem. Esse modelo possibilita uma abordagem mais flex\u00edvel e robusta em compara\u00e7\u00e3o com agentes que seguem um conjunto fixo de regras.</p>"},{"location":"#abordagens-declarativa-e-procedural","title":"Abordagens Declarativa e Procedural","text":"<p>A constru\u00e7\u00e3o de um agente baseado em conhecimento pode seguir duas abordagens principais:</p> <ol> <li> <p>Abordagem Declarativa: Consiste em iniciar com uma base de conhecimento vazia e, progressivamente, adicionar senten\u00e7as que descrevem o ambiente. Essa abordagem \u00e9 ideal para sistemas onde a explicabilidade e a adaptabilidade s\u00e3o cruciais.</p> </li> <li> <p>Abordagem Procedural: Nesta abordagem, os comportamentos desejados s\u00e3o codificados diretamente no programa. Embora seja menos flex\u00edvel, \u00e9 mais eficiente em cen\u00e1rios de alta previsibilidade.</p> </li> </ol>"},{"location":"#micromundos-e-exemplos-classicos","title":"Micromundos e Exemplos Cl\u00e1ssicos","text":"<p>Os agentes baseados em conhecimento s\u00e3o frequentemente estudados em micromundos \u2013 ambientes simplificados que permitem testar e validar conceitos de IA. Um dos exemplos mais conhecidos \u00e9 o Wumpus World, um cen\u00e1rio hipot\u00e9tico que desafia o agente a encontrar um tesouro enquanto evita perigos, como po\u00e7os e o monstro Wumpus.</p>"},{"location":"#exemplo-o-problema-do-diagnostico-medico","title":"Exemplo: O Problema do Diagn\u00f3stico M\u00e9dico","text":"<p>Outro exemplo famoso que ilustra o uso de agentes baseados em conhecimento \u00e9 o sistema de diagn\u00f3stico m\u00e9dico. Nesse contexto, o agente \u00e9 respons\u00e1vel por diagnosticar doen\u00e7as com base em sintomas apresentados por pacientes. O sistema possui:</p> <ol> <li>Base de Conhecimento (KB):</li> <li> <p>Representa informa\u00e7\u00f5es sobre doen\u00e7as, sintomas e rela\u00e7\u00f5es causais entre eles, como:</p> <ul> <li>\"Se febre alta e dor de cabe\u00e7a, pode ser meningite.\"</li> <li>\"Se dor de garganta e febre leve, pode ser faringite.\"</li> </ul> </li> <li> <p>Processo de Infer\u00eancia:</p> </li> <li>Dado o conjunto de sintomas relatados, o agente consulta a base de conhecimento para inferir a doen\u00e7a mais prov\u00e1vel.</li> <li> <p>Exemplo: Se um paciente relata febre alta e dor de cabe\u00e7a, o sistema pode deduzir meningite como um diagn\u00f3stico poss\u00edvel, com base na regra descrita.</p> </li> <li> <p>TELL e ASK:</p> </li> <li>A opera\u00e7\u00e3o TELL permite ao agente atualizar a base de conhecimento com novas informa\u00e7\u00f5es sobre doen\u00e7as ou padr\u00f5es de sintomas.</li> <li>A opera\u00e7\u00e3o ASK permite consultar a base para fazer diagn\u00f3sticos ou propor tratamentos.</li> </ol> <p>Este tipo de sistema \u00e9 amplamente usado em assistentes m\u00e9dicos automatizados, como o IBM Watson Health e sistemas baseados em l\u00f3gica de predicados.</p>"},{"location":"#caracteristicas-dos-agentes-baseados-em-conhecimento","title":"Caracter\u00edsticas dos Agentes Baseados em Conhecimento","text":"<ol> <li>Racioc\u00ednio Flex\u00edvel: S\u00e3o capazes de lidar com ambientes parcialmente observ\u00e1veis e din\u00e2micos.</li> <li>Infer\u00eancia: Permitem derivar novas informa\u00e7\u00f5es a partir de conhecimento existente.</li> <li>Explicabilidade: Fornecem justificativas claras para as decis\u00f5es tomadas.</li> <li>Adaptabilidade: Podem incorporar novas informa\u00e7\u00f5es dinamicamente.</li> </ol>"},{"location":"#sistema-de-classificacao-de-qualidade-do-ar","title":"Sistema de classifica\u00e7\u00e3o de qualidade do ar","text":"<p>Exemplo de Agente baseado em conhecimento baseado em um sistema de classifica\u00e7\u00e3o de qualidade do ar.  Neste sistema, o agente recebe informa\u00e7\u00f5es sobre poluentes no ar (como n\u00edveis de PM2.5 e PM10) e consulta uma base de conhecimento para classificar a qualidade do ar como \"Boa\", \"Moderada\", \"Ruim\" ou \"Perigosa\". Al\u00e9m disso, o agente plotar\u00e1 um gr\u00e1fico para visualiza\u00e7\u00e3o.</p>"},{"location":"#codigo-python","title":"C\u00f3digo Python","text":"<pre><code>import matplotlib.pyplot as plt\nimport pandas as pd\n\n# Base de Conhecimento\nknowledge_base = [\n    {\"if\": lambda pm25, pm10: pm25 &lt;= 50 and pm10 &lt;= 50, \"then\": \"Boa\"},\n    {\"if\": lambda pm25, pm10: 51 &lt;= pm25 &lt;= 100 or 51 &lt;= pm10 &lt;= 100, \"then\": \"Moderada\"},\n    {\"if\": lambda pm25, pm10: 101 &lt;= pm25 &lt;= 200 or 101 &lt;= pm10 &lt;= 200, \"then\": \"Ruim\"},\n    {\"if\": lambda pm25, pm10: pm25 &gt; 200 or pm10 &gt; 200, \"then\": \"Perigosa\"},\n]\n\n# Fun\u00e7\u00e3o de Infer\u00eancia\ndef classify_air_quality(pm25, pm10, knowledge_base):\n    \"\"\"\n    Classifica a qualidade do ar com base nos n\u00edveis de PM2.5 e PM10.\n    :param pm25: N\u00edvel de PM2.5.\n    :param pm10: N\u00edvel de PM10.\n    :param knowledge_base: Base de conhecimento com regras.\n    :return: Classifica\u00e7\u00e3o da qualidade do ar.\n    \"\"\"\n    for rule in knowledge_base:\n        if rule[\"if\"](pm25, pm10):\n            return rule[\"then\"]\n    return \"Indefinida\"\n\n# Gerar dados de exemplo\ndata = {\n    \"Cidade\": [\"Cidade A\", \"Cidade B\", \"Cidade C\", \"Cidade D\", \"Cidade E\"],\n    \"PM2.5\": [30, 80, 120, 180, 250],\n    \"PM10\": [40, 90, 150, 190, 300],\n}\n\n# Criar DataFrame\ndf = pd.DataFrame(data)\n\n# Adicionar classifica\u00e7\u00e3o ao DataFrame\ndf[\"Qualidade do Ar\"] = df.apply(lambda row: classify_air_quality(row[\"PM2.5\"], row[\"PM10\"], knowledge_base), axis=1)\n\n# Exibir tabela com as classifica\u00e7\u00f5es\nprint(df)\n\n# Visualiza\u00e7\u00e3o: Gr\u00e1fico de barras para qualidade do ar\nplt.figure(figsize=(10, 6))\ncolors = {\"Boa\": \"green\", \"Moderada\": \"yellow\", \"Ruim\": \"orange\", \"Perigosa\": \"red\"}\nplt.bar(df[\"Cidade\"], df[\"PM2.5\"], color=[colors[quality] for quality in df[\"Qualidade do Ar\"]], label=\"PM2.5\")\nplt.bar(df[\"Cidade\"], df[\"PM10\"], color=\"gray\", alpha=0.5, label=\"PM10\")\n\nplt.title(\"Qualidade do Ar por Cidade\", fontsize=14)\nplt.xlabel(\"Cidades\", fontsize=12)\nplt.ylabel(\"N\u00edveis de Poluentes\", fontsize=12)\nplt.axhline(50, color=\"green\", linestyle=\"--\", label=\"Boa\")\nplt.axhline(100, color=\"yellow\", linestyle=\"--\", label=\"Moderada\")\nplt.axhline(200, color=\"red\", linestyle=\"--\", label=\"Perigosa\")\nplt.legend()\nplt.grid(True)\nplt.show()\n</code></pre>"},{"location":"#explicacao-do-codigo","title":"Explica\u00e7\u00e3o do C\u00f3digo","text":"<ol> <li>Base de Conhecimento:</li> <li> <p>A base de conhecimento cont\u00e9m regras declarativas, onde cada regra define um intervalo de n\u00edveis de poluentes para classificar a qualidade do ar (Boa, Moderada, Ruim, Perigosa).</p> </li> <li> <p>Fun\u00e7\u00e3o de Infer\u00eancia:</p> </li> <li> <p>A fun\u00e7\u00e3o <code>classify_air_quality</code> avalia os n\u00edveis de PM2.5 e PM10 contra as condi\u00e7\u00f5es das regras na base de conhecimento. A primeira regra satisfeita retorna a classifica\u00e7\u00e3o.</p> </li> <li> <p>Gerar Dados de Exemplo:</p> </li> <li> <p>Criamos um conjunto fict\u00edcio de dados com os n\u00edveis de PM2.5 e PM10 para diferentes cidades.</p> </li> <li> <p>Visualiza\u00e7\u00e3o:</p> </li> <li>Um gr\u00e1fico de barras exibe os n\u00edveis de poluentes por cidade, com cores que representam a classifica\u00e7\u00e3o da qualidade do ar.</li> <li>Linhas de refer\u00eancia mostram os limites das classifica\u00e7\u00f5es, auxiliando na interpreta\u00e7\u00e3o visual.</li> </ol>"},{"location":"#saida-esperada","title":"Sa\u00edda Esperada","text":""},{"location":"#tabela-no-terminal","title":"Tabela no Terminal:","text":"<pre><code>     Cidade  PM2.5  PM10 Qualidade do Ar\n0  Cidade A     30    40             Boa\n1  Cidade B     80    90        Moderada\n2  Cidade C    120   150            Ruim\n3  Cidade D    180   190            Ruim\n4  Cidade E    250   300        Perigosa\n</code></pre>"},{"location":"#grafico-de-barras","title":"Gr\u00e1fico de Barras:","text":"<ul> <li>As barras para PM2.5 e PM10 s\u00e3o exibidas para cada cidade, com cores representando a classifica\u00e7\u00e3o da qualidade do ar:</li> <li>Verde: Boa</li> <li>Amarelo: Moderada</li> <li>Laranja: Ruim</li> <li>Vermelho: Perigosa</li> </ul>"},{"location":"#conclusao","title":"Conclus\u00e3o","text":"<p>Agentes baseados em conhecimento s\u00e3o fundamentais na intelig\u00eancia artificial, pois oferecem um modelo robusto e adapt\u00e1vel para tomada de decis\u00e3o em ambientes complexos. Seja em micromundos como o Wumpus World ou em aplica\u00e7\u00f5es reais, como sistemas de diagn\u00f3stico m\u00e9dico, eles demonstram a efic\u00e1cia do uso de l\u00f3gica e representa\u00e7\u00e3o de conhecimento.</p>"},{"location":"#-","title":"---","text":""},{"location":"#logica","title":"L\u00f3gica","text":"<p>A l\u00f3gica \u00e9 um dos fundamentos mais importantes da Intelig\u00eancia Artificial (IA), sendo utilizada para representar conhecimento e realizar infer\u00eancias. Em IA, a l\u00f3gica \u00e9 a base para criar agentes inteligentes que podem raciocinar, tomar decis\u00f5es e solucionar problemas com base em um conjunto de fatos e regras.</p>"},{"location":"#conceitos-fundamentais-da-logica","title":"Conceitos Fundamentais da L\u00f3gica","text":""},{"location":"#1-sintaxe","title":"1. Sintaxe","text":"<p>A sintaxe define as regras formais para construir senten\u00e7as na linguagem l\u00f3gica. Uma senten\u00e7a bem constru\u00edda segue as regras gramaticais e de preced\u00eancia dos operadores.</p> <p>Exemplo de senten\u00e7as bem e mal constru\u00eddas: - Bem constru\u00edda: \\( P \\land Q \\) - Mal constru\u00edda: \\( P Q \\lor \\land \\)</p>"},{"location":"#2-semantica","title":"2. Sem\u00e2ntica","text":"<p>A sem\u00e2ntica define o significado das senten\u00e7as, ou seja, como determinar se uma senten\u00e7a \u00e9 verdadeira ou falsa em um modelo espec\u00edfico. Um modelo \u00e9 uma atribui\u00e7\u00e3o de valores de verdade para as proposi\u00e7\u00f5es.</p> <p>Por exemplo: - Senten\u00e7a: \\( P \\lor Q \\) - Modelo \\( m_1 \\): \\( P = \\text{verdadeiro}, Q = \\text{falso} \\) - Resultado: Verdadeiro, pois \\( P \\) \u00e9 verdadeiro.</p>"},{"location":"#3-inferencia","title":"3. Infer\u00eancia","text":"<p>Infer\u00eancia l\u00f3gica \u00e9 o processo de derivar novas senten\u00e7as com base em senten\u00e7as j\u00e1 conhecidas. Um algoritmo de infer\u00eancia \u00e9 considerado completo se puder derivar qualquer senten\u00e7a verdadeira a partir da base de conhecimento.</p> <p>Por exemplo, dado: - \\( P \\Rightarrow Q \\) (Se \\( P \\), ent\u00e3o \\( Q \\)) - \\( P \\) \u00e9 verdadeiro - Podemos inferir que \\( Q \\) tamb\u00e9m \u00e9 verdadeiro.</p>"},{"location":"#tipos-de-logica","title":"Tipos de L\u00f3gica","text":""},{"location":"#logica-proposicional","title":"L\u00f3gica Proposicional","text":"<p>A l\u00f3gica proposicional trabalha com proposi\u00e7\u00f5es que podem ser verdadeiras ou falsas. Exemplos de operadores: - \u00ac (NOT): Nega\u00e7\u00e3o. \\( \\neg P \\) \u00e9 verdadeiro se \\( P \\) for falso. - \u2227 (AND): Conjun\u00e7\u00e3o. \\( P \u2227 Q \\) \u00e9 verdadeiro se ambos forem verdadeiros. - \u2228 (OR): Disjun\u00e7\u00e3o. \\( P \u2228 Q \\) \u00e9 verdadeiro se pelo menos um for verdadeiro. - \u21d2 (IMPLIES): Implica\u00e7\u00e3o. \\( P \u21d2 Q \\) \u00e9 falso apenas se \\( P \\) for verdadeiro e \\( Q \\) for falso. - \u21d4 (IFF): Bicondicional. \\( P \u21d4 Q \\) \u00e9 verdadeiro se \\( P \\) e \\( Q \\) forem ambos verdadeiros ou ambos falsos.</p>"},{"location":"#logica-de-primeira-ordem","title":"L\u00f3gica de Primeira Ordem","text":"<p>Estende a l\u00f3gica proposicional ao incluir vari\u00e1veis, quantificadores e rela\u00e7\u00f5es. Por exemplo: - Quantificador Universal (\\( \\forall \\)): \"Para todo\". - Quantificador Existencial (\\( \\exists \\)): \"Existe pelo menos um\".</p>"},{"location":"#exemplo","title":"Exemplo","text":"<p>A seguir, apresento um exemplo simples de l\u00f3gica proposicional em Python. Vamos verificar se uma senten\u00e7a \u00e9 verdadeira em diferentes modelos.</p> <pre><code># Modelo: Dicion\u00e1rio que associa proposi\u00e7\u00f5es a valores de verdade\nmodels = [\n    {\"P\": True, \"Q\": False},\n    {\"P\": False, \"Q\": True},\n    {\"P\": True, \"Q\": True},\n    {\"P\": False, \"Q\": False},\n]\n\n# Senten\u00e7as l\u00f3gicas\ndef logical_and(P, Q):\n    return P and Q\n\ndef logical_or(P, Q):\n    return P or Q\n\ndef logical_implies(P, Q):\n    return not P or Q\n\n# Avaliar as senten\u00e7as em cada modelo\nprint(\"Modelo | P AND Q | P OR Q | P \u21d2 Q\")\nprint(\"-\" * 32)\nfor model in models:\n    P, Q = model[\"P\"], model[\"Q\"]\n    and_result = logical_and(P, Q)\n    or_result = logical_or(P, Q)\n    implies_result = logical_implies(P, Q)\n    print(f\"{model} | {and_result}     | {or_result}    | {implies_result}\")\n</code></pre>"},{"location":"#saida-do-exemplo","title":"Sa\u00edda do Exemplo","text":"<pre><code>Modelo | P AND Q | P OR Q | P \u21d2 Q\n--------------------------------\n{'P': True, 'Q': False}  | False     | True    | False\n{'P': False, 'Q': True}  | False     | True    | True\n{'P': True, 'Q': True}   | True      | True    | True\n{'P': False, 'Q': False} | False     | False   | True\n</code></pre>"},{"location":"#analise-do-exemplo","title":"An\u00e1lise do Exemplo","text":"<ol> <li>Cada linha mostra o resultado das senten\u00e7as \\( P \u2227 Q \\), \\( P \u2228 Q \\) e \\( P \u21d2 Q \\) em diferentes modelos.</li> <li>O exemplo ajuda a visualizar como as opera\u00e7\u00f5es l\u00f3gicas funcionam em pr\u00e1tica.</li> </ol>"},{"location":"#-_1","title":"---","text":""},{"location":"#processo-de-inferencia","title":"Processo de Infer\u00eancia","text":"<p>O processo de infer\u00eancia \u00e9 o mecanismo pelo qual novos conhecimentos s\u00e3o derivados a partir de fatos e regras existentes em uma base de conhecimento (KB). Esse processo \u00e9 fundamental para agentes inteligentes que precisam raciocinar, solucionar problemas e tomar decis\u00f5es com base em informa\u00e7\u00f5es dispon\u00edveis.</p> <p>Infer\u00eancia em intelig\u00eancia artificial utiliza l\u00f3gica formal para garantir que as conclus\u00f5es derivadas sejam consistentes e confi\u00e1veis. O uso de algoritmos de infer\u00eancia permite que os agentes naveguem em cen\u00e1rios complexos, conectando dados e extraindo conclus\u00f5es explic\u00e1veis.</p>"},{"location":"#fundamentos-do-processo-de-inferencia","title":"Fundamentos do Processo de Infer\u00eancia","text":"<ol> <li>Base de Conhecimento (KB):</li> <li>Uma KB cont\u00e9m fatos e regras que representam o conhecimento do agente sobre o mundo.</li> <li> <p>Exemplo: </p> <ul> <li>Fatos: \\( P1,2 = \\text{falso}, P2,2 = \\text{verdadeiro} \\).</li> <li>Regras: \\( P1,2 \\Rightarrow \\neg P2,2 \\) (Se \\( P1,2 \\), ent\u00e3o \\( P2,2 \\) n\u00e3o \u00e9 verdadeiro).</li> </ul> </li> <li> <p>Objetivo do Processo de Infer\u00eancia:</p> </li> <li>Determinar se uma nova senten\u00e7a (\\( \\alpha \\)) pode ser derivada da KB.</li> <li> <p>Formalmente: \\( \\text{KB} \\models \\alpha \\), ou seja, \\( \\alpha \\) \u00e9 verdadeira em todos os modelos em que a KB \u00e9 verdadeira.</p> </li> <li> <p>Tipos de Infer\u00eancia:</p> </li> <li>Dedutiva: Conclus\u00f5es garantidamente verdadeiras se os fatos e as regras forem verdadeiros.</li> <li>Indutiva: Conclus\u00f5es prov\u00e1veis com base em observa\u00e7\u00f5es.</li> <li>Abdutiva: Infere a melhor explica\u00e7\u00e3o para um conjunto de dados.</li> </ol>"},{"location":"#algoritmos-de-inferencia","title":"Algoritmos de Infer\u00eancia","text":""},{"location":"#1-encadeamento-para-frente-forward-chaining","title":"1. Encadeamento para Frente (Forward Chaining):","text":"<ul> <li>Come\u00e7a com fatos conhecidos e aplica regras para derivar novas informa\u00e7\u00f5es.</li> <li>\u00datil para sistemas que monitoram eventos continuamente, como diagn\u00f3sticos.</li> </ul>"},{"location":"#2-encadeamento-para-tras-backward-chaining","title":"2. Encadeamento para Tr\u00e1s (Backward Chaining):","text":"<ul> <li>Come\u00e7a com uma hip\u00f3tese (objetivo) e trabalha para verificar se os fatos conhecidos podem prov\u00e1-la.</li> <li>Comum em sistemas baseados em regras, como mecanismos de consulta em IA.</li> </ul>"},{"location":"#vantagens-do-processo-de-inferencia","title":"Vantagens do Processo de Infer\u00eancia","text":"<ol> <li>Flexibilidade: Permite derivar novas informa\u00e7\u00f5es sem conhecer todas as vari\u00e1veis inicialmente.</li> <li>Explicabilidade: As conclus\u00f5es podem ser justificadas com base nos fatos e regras.</li> <li>Automatiza\u00e7\u00e3o: Pode ser aplicado em sistemas para monitorar e reagir a mudan\u00e7as no ambiente.</li> </ol>"},{"location":"#aplicacoes-praticas","title":"Aplica\u00e7\u00f5es Pr\u00e1ticas","text":"<ul> <li>Sistemas de Diagn\u00f3stico: Identificar doen\u00e7as a partir de sintomas.</li> <li>Assistentes Virtuais: Responder a perguntas com base em uma base de conhecimento.</li> <li>Jogos de IA: Tomar decis\u00f5es racionais em ambientes baseados em regras.</li> </ul>"},{"location":"#inferencia-logica-para-identificar-problemas-eletricos","title":"Infer\u00eancia L\u00f3gica para Identificar Problemas El\u00e9tricos","text":""},{"location":"#cenario","title":"Cen\u00e1rio:","text":"<p>Voc\u00ea quer identificar por que uma l\u00e2mpada n\u00e3o est\u00e1 acendendo. Sua base de conhecimento inclui fatos e regras:</p> <ul> <li>Fatos:</li> <li>O interruptor est\u00e1 ligado (\\( A = \\text{verdadeiro} \\)).</li> <li> <p>A l\u00e2mpada est\u00e1 conectada corretamente (\\( B = \\text{verdadeiro} \\)).</p> </li> <li> <p>Regras:</p> </li> <li>\\( A \\land B \\Rightarrow C \\) (Se o interruptor est\u00e1 ligado e a l\u00e2mpada est\u00e1 conectada corretamente, ent\u00e3o a l\u00e2mpada acende).</li> <li>\\( \\neg C \\Rightarrow D \\) (Se a l\u00e2mpada n\u00e3o acende, ent\u00e3o h\u00e1 um problema).</li> </ul>"},{"location":"#implementacao-do-processo-de-inferencia-em-python","title":"Implementa\u00e7\u00e3o do Processo de Infer\u00eancia em Python:","text":"<pre><code># Base de Conhecimento\nfacts = {\"A\": True, \"B\": True, \"C\": None, \"D\": None}  # C e D s\u00e3o inicialmente desconhecidos\nrules = [\n    {\"premise\": [\"A\", \"B\"], \"conclusion\": \"C\"},\n    {\"premise\": [\"not_C\"], \"conclusion\": \"D\"},\n]\n\n# Processo de Infer\u00eancia Simples\ndef infer(facts, rules):\n    for rule in rules:\n        # Verificar se a premissa da regra \u00e9 verdadeira\n        if all(facts.get(fact, False) if not fact.startswith(\"not_\") else not facts.get(fact[4:], True) for fact in rule[\"premise\"]):\n            facts[rule[\"conclusion\"]] = True\n\n# Aplicar Infer\u00eancia\ninfer(facts, rules)\n\n# Resultados\nfor fact, value in facts.items():\n    print(f\"{fact}: {value}\")\n</code></pre>"},{"location":"#saida","title":"Sa\u00edda:","text":"<pre><code>A: True\nB: True\nC: True\nD: None\n</code></pre>"},{"location":"#explicacao","title":"Explica\u00e7\u00e3o","text":"<ol> <li>\\( A \\land B \\Rightarrow C \\): Como \\( A \\) (interruptor ligado) e \\( B \\) (l\u00e2mpada conectada) s\u00e3o verdadeiros, \\( C \\) (l\u00e2mpada acende) \u00e9 inferido como verdadeiro.</li> <li>\\( \\neg C \\Rightarrow D \\): Essa regra n\u00e3o se aplica, porque \\( C \\) \u00e9 verdadeiro. Logo, \\( D \\) (h\u00e1 um problema) n\u00e3o \u00e9 inferido.</li> </ol>"},{"location":"#-_2","title":"---","text":""},{"location":"#agente-baseado-em-logica-proposicional","title":"Agente Baseado em L\u00f3gica Proposicional","text":"<p>Um agente baseado em l\u00f3gica proposicional \u00e9 um sistema de intelig\u00eancia artificial que utiliza l\u00f3gica proposicional como base para representar o conhecimento sobre o mundo, raciocinar a partir desse conhecimento e agir de forma racional. Ele opera tomando decis\u00f5es baseadas em fatos e regras expressos como senten\u00e7as l\u00f3gicas, permitindo que o agente execute infer\u00eancias consistentes e justific\u00e1veis.</p>"},{"location":"#componentes-de-um-agente-baseado-em-logica-proposicional","title":"Componentes de um Agente Baseado em L\u00f3gica Proposicional","text":"<ol> <li>Base de Conhecimento (KB):</li> <li>Cont\u00e9m fatos e regras expressos em l\u00f3gica proposicional.</li> <li> <p>Exemplo: </p> <ul> <li>\\( P1,2 = \\text{verdadeiro} \\): H\u00e1 um po\u00e7o na posi\u00e7\u00e3o (1,2).</li> <li>\\( \\neg W1,3 \\): N\u00e3o h\u00e1 um Wumpus na posi\u00e7\u00e3o (1,3).</li> </ul> </li> <li> <p>Sensores:</p> </li> <li> <p>Fornecem percep\u00e7\u00f5es sobre o ambiente. Essas percep\u00e7\u00f5es s\u00e3o traduzidas em fatos que s\u00e3o adicionados \u00e0 base de conhecimento.</p> </li> <li> <p>Atuadores:</p> </li> <li> <p>Permitem que o agente execute a\u00e7\u00f5es no ambiente com base nas conclus\u00f5es derivadas.</p> </li> <li> <p>Motor de Infer\u00eancia:</p> </li> <li> <p>Usa regras l\u00f3gicas para derivar novas informa\u00e7\u00f5es a partir da base de conhecimento.</p> </li> <li> <p>Estrat\u00e9gia de Decis\u00e3o:</p> </li> <li>Determina as a\u00e7\u00f5es a serem tomadas com base nos fatos conhecidos e nas infer\u00eancias.</li> </ol>"},{"location":"#exemplo-pratico-navegando-em-uma-grade-com-armadilhas","title":"Exemplo Pr\u00e1tico: Navegando em uma Grade com Armadilhas","text":""},{"location":"#descricao-do-problema","title":"Descri\u00e7\u00e3o do Problema","text":"<p>Um agente est\u00e1 em uma grade \\( 4 \\times 4 \\) e precisa se mover at\u00e9 o objetivo (tesouro) evitando armadilhas. O agente recebe percep\u00e7\u00f5es que indicam se h\u00e1 uma armadilha nas c\u00e9lulas adjacentes.</p> <ul> <li>Fatos:</li> <li>\\( S(x, y) \\): H\u00e1 uma armadilha na posi\u00e7\u00e3o \\( (x, y) \\).</li> <li> <p>\\( \\neg S(x, y) \\): N\u00e3o h\u00e1 uma armadilha na posi\u00e7\u00e3o \\( (x, y) \\).</p> </li> <li> <p>Regras:</p> </li> <li>Se h\u00e1 uma percep\u00e7\u00e3o de perigo em \\( (x, y) \\), ent\u00e3o pelo menos uma das c\u00e9lulas adjacentes cont\u00e9m uma armadilha:     \\(P(x, y) \\Rightarrow S(x+1, y) \\lor S(x-1, y) \\lor S(x, y+1) \\lor S(x, y-1)\\)</li> </ul>"},{"location":"#implementacao-em-python","title":"Implementa\u00e7\u00e3o em Python","text":"<p>Aqui est\u00e1 um exemplo b\u00e1sico de um agente baseado em l\u00f3gica proposicional:</p> <pre><code># Base de Conhecimento\nknowledge_base = {\n    \"S(2,2)\": False,  # N\u00e3o h\u00e1 armadilha em (2,2)\n    \"S(3,2)\": True,   # H\u00e1 uma armadilha em (3,2)\n    \"P(2,2)\": True,   # Percep\u00e7\u00e3o de perigo em (2,2)\n}\n\n# Regras\nrules = [\n    \"P(2,2) =&gt; S(3,2) or S(1,2) or S(2,3) or S(2,1)\"\n]\n\n# Motor de Infer\u00eancia\ndef infer(knowledge_base, rules):\n    conclusions = {}\n    for rule in rules:\n        premise, conclusion = rule.split(\"=&gt;\")\n        premise = premise.strip()\n        conclusion = [c.strip() for c in conclusion.split(\"or\")]\n\n        # Verificar se a premissa \u00e9 verdadeira\n        if knowledge_base.get(premise, False):\n            for concl in conclusion:\n                conclusions[concl] = True\n    return conclusions\n\n# Inferir novos fatos\nnew_facts = infer(knowledge_base, rules)\n\n# Atualizar Base de Conhecimento\nknowledge_base.update(new_facts)\n\n# Resultado\nprint(\"Base de Conhecimento Atualizada:\")\nfor fact, value in knowledge_base.items():\n    print(f\"{fact}: {value}\")\n</code></pre>"},{"location":"#saida_1","title":"Sa\u00edda","text":"<pre><code>Base de Conhecimento Atualizada:\nS(2,2): False\nS(3,2): True\nP(2,2): True\nS(1,2): True\nS(2,3): True\nS(2,1): True\n</code></pre>"},{"location":"#explicacao_1","title":"Explica\u00e7\u00e3o","text":"<ol> <li>A percep\u00e7\u00e3o \\( P(2,2) \\) indica que h\u00e1 perigo nas c\u00e9lulas adjacentes a \\( (2,2) \\).</li> <li>A regra \u00e9 aplicada para inferir que pelo menos uma das c\u00e9lulas \\( (3,2) \\), \\( (1,2) \\), \\( (2,3) \\), ou \\( (2,1) \\) cont\u00e9m uma armadilha.</li> <li>O motor de infer\u00eancia usa a base de conhecimento e as regras para atualizar os fatos conhecidos.</li> </ol>"},{"location":"#aplicacoes-praticas_1","title":"Aplica\u00e7\u00f5es Pr\u00e1ticas","text":"<ul> <li>Planejamento e Navega\u00e7\u00e3o: Agentes aut\u00f4nomos que evitam \u00e1reas perigosas em ambientes desconhecidos.</li> <li>Sistemas de Diagn\u00f3stico: Identificar poss\u00edveis causas de problemas com base em sintomas observados.</li> <li>Jogos de Tabuleiro: Racioc\u00ednio l\u00f3gico para decidir movimentos, como em xadrez ou quebra-cabe\u00e7as.</li> </ul>"},{"location":"#-_3","title":"---","text":""},{"location":"#referencias","title":"Refer\u00eancias","text":"<ol> <li>Russell, S. J., &amp; Norvig, P. (2021). Artificial Intelligence: A Modern Approach. 4th Edition. Pearson.</li> <li>Luger, G. F. (2009). Artificial Intelligence: Structures and Strategies for Complex Problem Solving. Addison-Wesley.</li> <li>Poole, D., Mackworth, A., &amp; Goebel, R. (1998). Computational Intelligence: A Logical Approach. Oxford University Press.</li> <li>Giarratano, J. C., &amp; Riley, G. D. (2005). Expert Systems: Principles and Programming. Thomson Learning.</li> <li>Baader, F., &amp; Nipkow, T. (1999). Term Rewriting and All That. Cambridge University Press.</li> <li>Charniak, E., &amp; McDermott, D. (1985). Introduction to Artificial Intelligence. Addison-Wesley.</li> </ol>"}]}